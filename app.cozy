
express = require('express')
stylus = require('stylus')
nib = require('nib')
util = require('util')
fs = require('fs')

cli = require('cli')
MoeDB = require('./db.js').MoeDB

options = cli.parse
    db_path: ['d', 'SQLite database path', 'string']

db = new MoeDB(options.db_path)

app = express()

compile = (str, path) ->
    return stylus(str).set('filename', path).use(nib())

app.set('views', __dirname + '/views')
app.set('view engine', 'jade')
app.set('view options', { layout: false })
app.use(express.logger())
app.use(express.bodyParser())
app.use(express.cookieParser())
app.use(express.session(secret: "moe"))

allowCrossDomain = (req, res, next) ->

    res.header('Access-Control-Allow-Origin', '*')
    res.header('Access-Control-Allow-Methods', 'GET')
    res.header('Access-Control-Allow-Headers', 'Content-Type')

    next!

#app.use(allowCrossDomain)
app.use(stylus.middleware { src: __dirname + '/public', compile: compile})
app.use(express.static(__dirname + '/public'))

(error, req, res, next) <- app.use!
    console.log(error)
    res.send(500, {error: util.inspect(error)})

title_strs = []
eng_title_strs = {}
(err, rows) <- db.get_all_titles!
    titles = []
    for row in rows
        new_title = row.title.replace(/\(.*\)/, '')
        if row.title isnt new_title
            eng_title_strs[new_title] = row.title
            row.title = new_title
        titles[row.title.length] = [] if not titles[row.title.length]?
        titles[row.title.length].push(row.title)
    for title_item, title_len in titles
        title_item = "\n" + title_item.join("\n") if title_item?
        title_strs[title_len] = title_item
    titles = []
    console.log("MoeDict server is ready")

find_in_dict = (query, cb) ->

    col = "title"

    if /%$/.exec(query)
        #query = query.replace(/&$/, '')
        col = "def"
        query = "%#{query}"
        db.find_all_by_def(query, cb)
    else
        if (new_query = query.replace(/\$$/, '')) is query
            query += '%'
        else
            query = new_query

        db.find_all_by_title(query, cb)


query_dict = (query, cb) ->

     (err, rows) <- find_in_dict(query, _)

        for row in rows

            if row.def?
                defs = row.def.split(/\n/)
                row.def = defs

            if row.example?
                examples = row.example.split(/\n/)
                row.example = examples

            if row.quote?
                quotes = row.quote.split(/\n/)
                if quotes?
                    row.quote = []
                    for quote in quotes
                        row.quote.push(quote.split(','))

            if row.type?
                types = row.type.split(/\n/)
                row.type = types

            if row.link?
                links = row.link.split(/\n/)
                row.link = links
 
            if row.synonyms?
                synonyms = row.synonyms.split(/\n/)
                row.synonyms = synonyms
 
            if row.antonyms?
                antonyms = row.antonyms.split(/\n/)
                row.antonyms = antonyms

            if row.lang?
                langs = row.lang.split(/\n/)
                lang_defs = row.lang_def.split(/\n/)
                row.translations = []
                translations = {}
                for index in [0..langs.length - 1]
                    unless /CL:/.test(lang_defs[index])
                        if translations[langs[index]]?
                            translations[langs[index]].push(lang_defs[index])
                        else
                            translations[langs[index]] = [lang_defs[index]]

                for lang, defs of translations
                    translation =
                        lang: lang
                        def: defs.join('; ')
                    row.translations.push(translation)

            row.definitions = []
            def_type = ''
            for index in [0..row.def.length - 1]
                definition = 
                    def: if row.def? then (if row.def[index] is ' ' then '' else row.def[index]) else ''
                    quote: if row.quote? then row.quote[index] else ''
                    example: if row.example? then (if row.example[index] is ' ' then '' else row.example[index]) else ''
                    type: if row.type? then (if row.type[index] is ' ' then '' else row.type[index]) else ''
                    link: if row.link? then (if row.link[index] is ' ' then '' else row.link[index]) else ''
                    synonyms: if row.synonyms? then (if row.synonyms[index] is ' ' then '' else row.synonyms[index]) else ''
                    antonyms: if row.antonyms? then (if row.antonyms[index] is ' ' then '' else row.antonyms[index]) else ''
                    def_type: if def_type isnt '' then def_type else ['']

                if /\u20DE/.test(definition.def)
                    def_type = definition.def.replace(/\u20DE/g, '')
                    def_type = def_type.split(/\&nbsp/)
                else
                    def_type = ''
                    row.definitions.push(definition)

            delete row.def
            delete row.type
            delete row.quote
            delete row.example
            delete row.result
            delete row.link
            delete row.synonyms
            delete row.antonyms
            delete row.lang
            delete row.lang_def

        cb(rows)
 
app.get('/q/*', allowCrossDomain)

(req, res) <- app.get('/q/:query', _)

    (rows) <- query_dict(req.params.query, _)
        res.send(rows)

(req, res) <- app.get('/q/web/:query', _)

    punctuations = ['，', '。', '（', '）', '「', '」', '．', '：', '、']

    to_clickable = (def_str, loc) ->
        if loc >= def_str.length
            return ''

        step = 1
        last_sub_def_str = ''
        last_found_step = 0
        first_char = def_str.substr(loc, 1)
        if punctuations.indexOf(first_char) is -1 and not /[\d|a-zA-Z]/.test(first_char)
            while loc + step <= def_str.length
                sub_def_str = def_str.substr(loc, step)
                last_char = sub_def_str.substr(sub_def_str.length - 1, 1)
                if punctuations.indexOf(last_char) is -1 and not /[\d|a-zA-Z]/.test(last_char)
                    if title_strs[sub_def_str.length]? and (title_strs[sub_def_str.length].indexOf("\n" + sub_def_str + "\n") + 1) > 0
                        last_sub_def_str = sub_def_str
                        last_found_step = step
                step++

            #if eng_title_strs[last_sub_def_str]?
            #    last_sub_def_str = eng_title_strs[last_sub_def_str]

            return "<a href='##{if eng_title_strs[last_sub_def_str]? then eng_title_strs[last_sub_def_str] else last_sub_def_str}'>#{last_sub_def_str}</a>" + to_clickable(def_str, loc + last_found_step) if last_found_step >= 1

        def_str.substr(loc, 1) + to_clickable(def_str, loc + 1)


    (rows) <- query_dict(req.params.query, _)
        for row in rows
            for definition in row.definitions
                definition.def = to_clickable(definition.def, 0) if definition.def?
                #definition.def += """<script type="text/javascript">$("a").click(function(event) {
                #    return window.get_dict_content(event.target.text);
                #    });</script>"""

                definition.example = to_clickable(definition.example, 0) if definition.example?

                definition.link = to_clickable(definition.link, 0) if definition.link?
 
                if definition.def_type[0] isnt '' 
                    definition.isdef_type = true
                else
                    definition.isdef_type = false

                #for index in [0..definition.def_type.length - 1]
                #    definition.def_type[index] = to_clickable(definition.def_type[index], 0) if definition.def_type[index]?
                
                definition.synonyms = to_clickable(definition.synonyms, 0) if definition.synonyms?
                definition.antonyms = to_clickable(definition.antonyms, 0) if definition.antonyms?
 
                if definition.quote[0] isnt '' and definition.quote[0] isnt ' '
                    definition.isquote = true
                else
                    definition.isquote = false

                for index in [0..definition.quote.length - 1]
                    definition.quote[index] = to_clickable(definition.quote[index], 0) if definition.quote[index]?
                    definition.quote[index] += """<script type="text/javascript">$("a").click(function(event) {
                        return window.get_dict_content(event.target.text);
                        });</script>"""

        res.send(rows)


(req, res) <- app.get('/q/title/:query', _)

    (err, rows) <- db.find_all_titles_by_title(req.params.query, _)
        res.send(rows)

(req, res) <- app.get('/utf8/:stroke', _)

    (err, data) <- fs.readFile('utf8/' + req.params.stroke, _)
        if (err)
            throw err
        res.send(data)

(req, res) <- app.get('/', _)

    res.render('index')        
    
app.listen(8080)


