// Generated by CozyScript 0.1.1
(function() {
  var MoeDB, app, cli, compile, db, express, find_in_dict, nib, options, stylus, title_strs, util;

  express = require('express');

  stylus = require('stylus');

  nib = require('nib');

  util = require('util');

  cli = require('cli');

  MoeDB = require('./db.js').MoeDB;

  options = cli.parse({
    db_path: ['d', 'SQLite database path', 'string']
  });

  db = new MoeDB(options.db_path);

  app = express();

  compile = function(str, path) {
    return stylus(str).set('filename', path).use(nib());
  };

  app.set('views', __dirname + '/views');

  app.set('view engine', 'jade');

  app.set('view options', {
    layout: false
  });

  app.use(express.logger());

  app.use(express.bodyParser());

  app.use(express.cookieParser());

  app.use(express.session({
    secret: "moe"
  }));

  app.use(stylus.middleware({
    src: __dirname + '/public',
    compile: compile
  }));

  app.use(express["static"](__dirname + '/public'));

  app.use(function(error, req, res, next) {
    console.log(error);
    return res.send(500, {
      error: util.inspect(error)
    });
  });

  title_strs = '';

  db.get_all_titles(function(err, rows) {
    var row, titles, _i, _len;
    titles = [];
    for (_i = 0, _len = rows.length; _i < _len; _i++) {
      row = rows[_i];
      titles.push(row.title);
    }
    title_strs = "\n" + titles.join("\n");
    return console.log("MoeDict server is ready");
  });

  find_in_dict = function(query, cb) {
    var col, new_query;
    col = "title";
    if (/%$/.exec(query)) {
      col = "def";
      query = "%" + query;
      return db.find_all_by_def(query, cb);
    } else {
      if ((new_query = query.replace(/\$$/, '')) === query) {
        query += '%';
      } else {
        query = new_query;
      }
      return db.find_all_by_title(query, cb);
    }
  };

  app.get('/q/:query', function(req, res) {
    return find_in_dict(req.params.query, function(err, rows) {
      var defs, row, _i, _len;
      for (_i = 0, _len = rows.length; _i < _len; _i++) {
        row = rows[_i];
        defs = row.def.split(/\n/);
        row.def = defs;
        delete row.result;
      }
      return res.send(rows);
    });
  });

  app.get('/q/web/:query', function(req, res) {
    var punctuations, to_clickable;
    punctuations = ['，', '。', '（', '）', '「', '」'];
    to_clickable = function(def_str, loc) {
      var found_index, last_found_step, last_sub_def_str, step, sub_def_str;
      if (loc >= def_str.length) {
        return '';
      }
      step = 2;
      last_sub_def_str = '';
      last_found_step = 0;
      while (loc + step <= def_str.length) {
        sub_def_str = def_str.substr(loc, step);
        if (punctuations.indexOf(sub_def_str.substr(sub_def_str.length - 1, 1)) === -1 && (found_index = title_strs.indexOf("\n" + sub_def_str) + 1) > 0) {
          if (title_strs.substr(found_index + step, 1) === "\n") {
            last_sub_def_str = sub_def_str;
            last_found_step = step;
          }
        } else {
          if (last_found_step >= 1) {
            return ("<a href='#" + last_sub_def_str + "'>" + last_sub_def_str + "</a>") + to_clickable(def_str, loc + last_found_step);
          }
        }
        step++;
      }
      return def_str.substr(loc, 1) + to_clickable(def_str, loc + 1);
    };
    return find_in_dict(req.params.query, function(err, rows) {
      var def, defs, linked_defs, row, _i, _j, _len, _len1;
      for (_i = 0, _len = rows.length; _i < _len; _i++) {
        row = rows[_i];
        defs = row.def.split(/\n/);
        linked_defs = [];
        for (_j = 0, _len1 = defs.length; _j < _len1; _j++) {
          def = defs[_j];
          linked_defs.push(to_clickable(def, 0));
        }
        linked_defs[defs.length - 1] += "<script type=\"text/javascript\">$(\"a\").click(function(event) {\nreturn window.get_dict_content(event.target.text);\n});</script>";
        row.def = linked_defs;
        delete row.result;
      }
      return res.send(rows);
    });
  });

  app.get('/q/title/:query', function(req, res) {
    return db.find_all_titles_by_title(req.params.query, function(err, rows) {
      return res.send(rows);
    });
  });

  app.get('/', function(req, res) {
    return res.render('index');
  });

  app.listen(8080);

}).call(this);
