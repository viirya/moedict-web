// Generated by CozyScript 0.1.1
(function() {
  var MoeDB, sqlite3,
    __slice = [].slice,
    __partialize = function partialize$(f, args, where){
  var context = this;
  return function(){
    var params = __slice.call(arguments), i,
        len = params.length, wlen = where.length,
        ta = args ? args.concat() : [], tw = where ? where.concat() : [];
    for(i = 0; i < len; ++i) { ta[tw[0]] = params[i]; tw.shift(); }
    return len < wlen && len ?
      partialize$.apply(context, [f, ta, tw]) : f.apply(context, ta);
  };
};

  sqlite3 = require('sqlite3').verbose();

  MoeDB = (function() {

    function MoeDB(db_path) {
      this.db_path = db_path;
      this.db = new sqlite3.Database(this.db_path);
      this.sql = function(col, query) {
        return "SELECT '' || title || '\t' || heteronyms.bopomofo || '\n» ' || group_concat(\n  def, '\n» '\n) || '\n' as result, title, heteronyms.bopomofo as bopomofo, group_concat(def, '\n') as def\nFROM entries\nJOIN heteronyms ON entry_id = entries.id\nJOIN definitions ON heteronym_id = heteronyms.id\nWHERE " + col + " LIKE '" + query + "'\nGROUP BY title, heteronyms.bopomofo;";
      };
      this.sql_by_title = __partialize.apply(this, [this.sql, ['title', void 0], [1]]);
      this.sql_by_def = __partialize.apply(this, [this.sql, ['def', void 0], [1]]);
      this.def_cb = function(err, row) {
        console.log(row);
        return console.log(row.result);
      };
    }

    MoeDB.prototype.find_by_title = function(title, cb) {
      if (cb == null) {
        cb = this.def_cb;
      }
      return this.find_each(this.sql_by_title(title), cb);
    };

    MoeDB.prototype.find_by_def = function(def, cb) {
      if (cb == null) {
        cb = this.def_cb;
      }
      return this.find_each(this.sql_by_def(def), cb);
    };

    MoeDB.prototype.find_all_by_title = function(title, cb) {
      if (cb == null) {
        cb = this.def_cb;
      }
      return this.find_all(this.sql_by_title(title), cb);
    };

    MoeDB.prototype.find_all_by_def = function(def, cb) {
      if (cb == null) {
        cb = this.def_cb;
      }
      return this.find_all(this.sql_by_def(def), cb);
    };

    MoeDB.prototype.find_all = function(sql, cb) {
      var _this = this;
      if (this.db != null) {
        return this.db.serialize(function() {
          return _this.db.all(sql, function(err, rows) {
            return cb(err, rows);
          });
        });
      }
    };

    MoeDB.prototype.find_each = function(sql, cb) {
      var _this = this;
      if (this.db != null) {
        return this.db.serialize(function() {
          return _this.db.each(sql, function(err, row) {
            return cb(err, row);
          });
        });
      }
    };

    MoeDB.prototype.close = function() {
      return this.db.close();
    };

    return MoeDB;

  })();

  exports.MoeDB = MoeDB;

}).call(this);
